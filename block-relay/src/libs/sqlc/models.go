// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0

package sqlc

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"
)

type RelayersBlockchain string

const (
	RelayersBlockchainFLOW RelayersBlockchain = "FLOW"
	RelayersBlockchainETH  RelayersBlockchain = "ETH"
)

func (e *RelayersBlockchain) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RelayersBlockchain(s)
	case string:
		*e = RelayersBlockchain(s)
	default:
		return fmt.Errorf("unsupported scan type for RelayersBlockchain: %T", src)
	}
	return nil
}

type NullRelayersBlockchain struct {
	RelayersBlockchain RelayersBlockchain `json:"relayersBlockchain"`
	Valid              bool               `json:"valid"` // Valid is true if RelayersBlockchain is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRelayersBlockchain) Scan(value interface{}) error {
	if value == nil {
		ns.RelayersBlockchain, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RelayersBlockchain.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRelayersBlockchain) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RelayersBlockchain), nil
}

type RelayersRelayerTransport string

const (
	RelayersRelayerTransportHTTP RelayersRelayerTransport = "HTTP"
	RelayersRelayerTransportSMTP RelayersRelayerTransport = "SMTP"
)

func (e *RelayersRelayerTransport) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RelayersRelayerTransport(s)
	case string:
		*e = RelayersRelayerTransport(s)
	default:
		return fmt.Errorf("unsupported scan type for RelayersRelayerTransport: %T", src)
	}
	return nil
}

type NullRelayersRelayerTransport struct {
	RelayersRelayerTransport RelayersRelayerTransport `json:"relayersRelayerTransport"`
	Valid                    bool                     `json:"valid"` // Valid is true if RelayersRelayerTransport is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRelayersRelayerTransport) Scan(value interface{}) error {
	if value == nil {
		ns.RelayersRelayerTransport, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RelayersRelayerTransport.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRelayersRelayerTransport) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RelayersRelayerTransport), nil
}

type Deployment struct {
	ID        string    `json:"id"`
	CreatedAt time.Time `json:"createdAt"`
	Name      string    `json:"name"`
	Namespace string    `json:"namespace"`
	UserID    string    `json:"userId"`
}

type Relayer struct {
	ID               string                   `json:"id"`
	CreatedAt        time.Time                `json:"createdAt"`
	Name             string                   `json:"name"`
	Blockchain       RelayersBlockchain       `json:"blockchain"`
	RelayerTransport RelayersRelayerTransport `json:"relayerTransport"`
	Options          json.RawMessage          `json:"options"`
	DeploymentID     string                   `json:"deploymentId"`
	UserID           string                   `json:"userId"`
}

type User struct {
	ID        string    `json:"id"`
	CreatedAt time.Time `json:"createdAt"`
}
