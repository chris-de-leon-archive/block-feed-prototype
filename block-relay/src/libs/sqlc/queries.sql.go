// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package sqlc

import (
	"context"
)

const GetWebhook = `-- name: GetWebhook :one
SELECT id, created_at, url, max_blocks, max_retries, timeout_ms, customer_id, blockchain_id FROM ` + "`" + `webhook` + "`" + ` WHERE ` + "`" + `id` + "`" + ` = ?
`

// GetWebhook
//
//	SELECT id, created_at, url, max_blocks, max_retries, timeout_ms, customer_id, blockchain_id FROM `webhook` WHERE `id` = ?
func (q *Queries) GetWebhook(ctx context.Context, id string) (*Webhook, error) {
	row := q.db.QueryRowContext(ctx, GetWebhook, id)
	var i Webhook
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Url,
		&i.MaxBlocks,
		&i.MaxRetries,
		&i.TimeoutMs,
		&i.CustomerID,
		&i.BlockchainID,
	)
	return &i, err
}

const UpsertBlockchain = `-- name: UpsertBlockchain :execrows
INSERT IGNORE INTO ` + "`" + `blockchain` + "`" + ` (` + "`" + `id` + "`" + `, ` + "`" + `url` + "`" + `) 
VALUES (?, ?)
ON DUPLICATE KEY UPDATE ` + "`" + `url` + "`" + ` = VALUES(` + "`" + `url` + "`" + `)
`

type UpsertBlockchainParams struct {
	ID  string `json:"id"`
	Url string `json:"url"`
}

// UpsertBlockchain
//
//	INSERT IGNORE INTO `blockchain` (`id`, `url`)
//	VALUES (?, ?)
//	ON DUPLICATE KEY UPDATE `url` = VALUES(`url`)
func (q *Queries) UpsertBlockchain(ctx context.Context, arg *UpsertBlockchainParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, UpsertBlockchain, arg.ID, arg.Url)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}
