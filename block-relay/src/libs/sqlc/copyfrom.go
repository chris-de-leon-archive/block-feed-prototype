// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: copyfrom.go

package sqlc

import (
	"context"
)

// iteratorForCacheBlocks implements pgx.CopyFromSource.
type iteratorForCacheBlocks struct {
	rows                 []*CacheBlocksParams
	skippedFirstNextCall bool
}

func (r *iteratorForCacheBlocks) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCacheBlocks) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].BlockchainID,
		r.rows[0].BlockHeight,
		r.rows[0].Block,
	}, nil
}

func (r iteratorForCacheBlocks) Err() error {
	return nil
}

// CacheBlocks
//
//	INSERT INTO "block_cache" ("blockchain_id", "block_height", "block")
//	VALUES ($1, $2, $3)
func (q *Queries) CacheBlocks(ctx context.Context, arg []*CacheBlocksParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"block_cache"}, []string{"blockchain_id", "block_height", "block"}, &iteratorForCacheBlocks{rows: arg})
}
