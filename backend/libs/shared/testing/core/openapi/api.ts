/* tslint:disable */
/* eslint-disable */
/**
 * Block Feed API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface FuncsCreate200Response
 */
export interface FuncsCreate200Response {
    /**
     * 
     * @type {number}
     * @memberof FuncsCreate200Response
     */
    'count': number;
}
/**
 * 
 * @export
 * @interface FuncsCreateRequest
 */
export interface FuncsCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof FuncsCreateRequest
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface FuncsFindMany200ResponseInner
 */
export interface FuncsFindMany200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof FuncsFindMany200ResponseInner
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FuncsFindMany200ResponseInner
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof FuncsFindMany200ResponseInner
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FuncsFindMany200ResponseInner
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface FuncsFindManyDefaultResponse
 */
export interface FuncsFindManyDefaultResponse {
    /**
     * 
     * @type {string}
     * @memberof FuncsFindManyDefaultResponse
     */
    'message': string;
    /**
     * 
     * @type {string}
     * @memberof FuncsFindManyDefaultResponse
     */
    'code': string;
    /**
     * 
     * @type {Array<FuncsFindManyDefaultResponseIssuesInner>}
     * @memberof FuncsFindManyDefaultResponse
     */
    'issues'?: Array<FuncsFindManyDefaultResponseIssuesInner>;
}
/**
 * 
 * @export
 * @interface FuncsFindManyDefaultResponseIssuesInner
 */
export interface FuncsFindManyDefaultResponseIssuesInner {
    /**
     * 
     * @type {string}
     * @memberof FuncsFindManyDefaultResponseIssuesInner
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface FuncsRemoveRequest
 */
export interface FuncsRemoveRequest {
    /**
     * 
     * @type {string}
     * @memberof FuncsRemoveRequest
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface FuncsUpdateRequest
 */
export interface FuncsUpdateRequest {
    /**
     * 
     * @type {string}
     * @memberof FuncsUpdateRequest
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof FuncsUpdateRequest
     */
    'name': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {FuncsCreateRequest} funcsCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        funcsCreate: async (funcsCreateRequest: FuncsCreateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'funcsCreateRequest' is not null or undefined
            assertParamExists('funcsCreate', 'funcsCreateRequest', funcsCreateRequest)
            const localVarPath = `/funcs.Create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(funcsCreateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        funcsFindMany: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/funcs.FindMany`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        funcsFindOne: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('funcsFindOne', 'id', id)
            const localVarPath = `/funcs.FindOne`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FuncsRemoveRequest} funcsRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        funcsRemove: async (funcsRemoveRequest: FuncsRemoveRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'funcsRemoveRequest' is not null or undefined
            assertParamExists('funcsRemove', 'funcsRemoveRequest', funcsRemoveRequest)
            const localVarPath = `/funcs.Remove`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(funcsRemoveRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {FuncsUpdateRequest} funcsUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        funcsUpdate: async (funcsUpdateRequest: FuncsUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'funcsUpdateRequest' is not null or undefined
            assertParamExists('funcsUpdate', 'funcsUpdateRequest', funcsUpdateRequest)
            const localVarPath = `/funcs.Update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(funcsUpdateRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {FuncsCreateRequest} funcsCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async funcsCreate(funcsCreateRequest: FuncsCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FuncsCreate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.funcsCreate(funcsCreateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async funcsFindMany(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FuncsFindMany200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.funcsFindMany(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async funcsFindOne(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FuncsFindMany200ResponseInner>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.funcsFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FuncsRemoveRequest} funcsRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async funcsRemove(funcsRemoveRequest: FuncsRemoveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FuncsCreate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.funcsRemove(funcsRemoveRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {FuncsUpdateRequest} funcsUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async funcsUpdate(funcsUpdateRequest: FuncsUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FuncsCreate200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.funcsUpdate(funcsUpdateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {FuncsCreateRequest} funcsCreateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        funcsCreate(funcsCreateRequest: FuncsCreateRequest, options?: any): AxiosPromise<FuncsCreate200Response> {
            return localVarFp.funcsCreate(funcsCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        funcsFindMany(options?: any): AxiosPromise<Array<FuncsFindMany200ResponseInner>> {
            return localVarFp.funcsFindMany(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        funcsFindOne(id: string, options?: any): AxiosPromise<FuncsFindMany200ResponseInner> {
            return localVarFp.funcsFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FuncsRemoveRequest} funcsRemoveRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        funcsRemove(funcsRemoveRequest: FuncsRemoveRequest, options?: any): AxiosPromise<FuncsCreate200Response> {
            return localVarFp.funcsRemove(funcsRemoveRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {FuncsUpdateRequest} funcsUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        funcsUpdate(funcsUpdateRequest: FuncsUpdateRequest, options?: any): AxiosPromise<FuncsCreate200Response> {
            return localVarFp.funcsUpdate(funcsUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {FuncsCreateRequest} funcsCreateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public funcsCreate(funcsCreateRequest: FuncsCreateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).funcsCreate(funcsCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public funcsFindMany(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).funcsFindMany(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public funcsFindOne(id: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).funcsFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FuncsRemoveRequest} funcsRemoveRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public funcsRemove(funcsRemoveRequest: FuncsRemoveRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).funcsRemove(funcsRemoveRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {FuncsUpdateRequest} funcsUpdateRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public funcsUpdate(funcsUpdateRequest: FuncsUpdateRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).funcsUpdate(funcsUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


