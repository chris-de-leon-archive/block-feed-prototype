type Blockchain {
  id: String!
  url: String!
}

type Count {
  count: Int!
}

input CursorInput {
  id: String!
  reverse: Boolean!
}

input CursorPaginationInput {
  cursor: CursorInput
  limit: Int!
}

type Mutation {
  webhookActivate(ids: [String!]!): Count!
  webhookCreate(data: WebhookCreateInput!): UUID!
  webhookRemove(ids: [String!]!): Count!
  webhookUpdate(data: WebhookUpdateInput!, id: String!): Count!
}

type PaginationFlags {
  hasNext: Boolean!
  hasPrev: Boolean!
}

type Query {
  blockchains: [Blockchain!]!
  webhook(id: String!): Webhook!
  webhooks(filters: WebhookFiltersInput!, pagination: CursorPaginationInput!): Webhooks!
}

input StringEqFilterInput {
  eq: String
}

input StringLikeFilterInput {
  like: String
}

type UUID {
  id: String!
}

type Webhook {
  blockchainId: String!
  createdAt: String!
  customerId: String!
  id: String!
  isActive: Int!
  isQueued: Int!
  maxBlocks: Int!
  maxRetries: Int!
  timeoutMs: Int!
  url: String!
}

input WebhookCreateInput {
  blockchainId: String!
  maxBlocks: Int!
  maxRetries: Int!
  timeoutMs: Int!
  url: String!
}

input WebhookFiltersBodyInput {
  blockchain: StringEqFilterInput
  status: WebhookStatusFilterInput
  url: StringLikeFilterInput
}

input WebhookFiltersInput {
  and: WebhookFiltersBodyInput
}

enum WebhookStatus {
  ACTIVE
  INACTIVE
  PENDING
}

input WebhookStatusFilterInput {
  eq: WebhookStatus
}

input WebhookUpdateInput {
  maxBlocks: Int
  maxRetries: Int
  timeoutMs: Int
  url: String
}

type Webhooks {
  pagination: PaginationFlags!
  payload: [Webhook!]!
}